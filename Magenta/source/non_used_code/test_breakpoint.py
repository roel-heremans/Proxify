import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

time_series = [6, 8, 13, 15, 18, 21, 24, 27, 30,  40, 50, 60, 70, 80, 90, 100]
time_series = [28.98073047, 28.99217057, 29.0064707 , 29.01791081, 29.03507096,
       29.04651107, 29.06653125, 29.08655143, 29.10943164, 29.13517188,
       29.16663216, 29.20095247, 29.23241276, 29.26673307, 29.29533333,
       29.32679362, 29.35539388, 29.37827409, 29.40687435, 29.43261458,
       29.46121484, 29.49267513, 29.52413542, 29.5555957 , 29.58133594,
       29.6099362 , 29.63567643, 29.65569661, 29.67857682, 29.69859701,
       29.70717708, 29.71575716, 29.72433724]
time_series = [18.51303516, 18.51303516, 18.51303516, 18.51589518, 18.51589518,
       18.51303516, 18.51589518, 18.52161523, 18.52161523, 18.52447526,
       18.53019531, 18.53019531, 18.53305534, 18.53877539, 18.54163542,
       18.54449544, 18.55021549, 18.55307552, 18.55307552, 18.55879557,
       18.5616556 , 18.56451562, 18.56451562, 18.56737565, 18.57023568,
       18.57595573, 18.58167578, 18.58167578, 18.58453581, 18.59025586,
       18.59311589, 18.59597591, 18.59883594, 18.60169596, 18.60169596,
       18.60455599, 18.60455599, 18.61027604, 18.61313607, 18.61885612,
       18.62171615, 18.61885612, 18.62457617, 18.62171615, 18.62171615,
       18.62457617, 18.62457617, 18.62457617, 18.62457617, 18.62457617,
       18.62171615, 18.61885612, 18.61313607, 18.61027604, 18.60741602,
       18.60169596, 18.60169596, 18.59597591, 18.59883594, 18.59597591,
       18.59025586, 18.58739583, 18.58739583, 18.58453581, 18.58453581,
       18.58453581, 18.58453581, 18.58453581, 18.58453581, 18.58167578,
       18.58167578, 18.58167578, 18.58453581, 18.58167578, 18.58167578,
       18.58167578, 18.58167578, 18.57881576, 18.58167578, 18.58453581,
       18.58739583, 18.58739583, 18.59025586, 18.59311589, 18.59597591,
       18.59597591, 18.59883594, 18.59883594, 18.60169596, 18.60455599,
       18.60741602, 18.60741602, 18.61313607, 18.61313607, 18.61027604,
       18.61027604, 18.61599609, 18.61885612, 18.62171615, 18.62457617,
       18.63315625, 18.6388763 , 18.64173633, 18.64745638, 18.65031641,
       18.65603646, 18.66461654, 18.67033659, 18.67605664, 18.68463672,
       18.6932168 , 18.69893685, 18.7046569 , 18.71037695, 18.71609701,
       18.71895703, 18.72467708, 18.73325716, 18.73611719, 18.74469727,
       18.75041732, 18.75613737, 18.75613737, 18.76471745, 18.76757747,
       18.77329753, 18.77901758, 18.7818776 , 18.78759766, 18.79331771,
       18.79903776, 18.80189779, 18.80761784, 18.81333789, 18.81619792,
       18.82191797, 18.83049805, 18.83907813, 18.84193815, 18.8476582 ,
       18.85337826, 18.85337826, 18.86481836, 18.87339844, 18.88197852,
       18.89055859, 18.89913867, 18.90485872, 18.91629883, 18.93059896,
       18.93917904, 18.95061914, 18.96491927, 18.9792194 , 18.99351953,
       19.00495964, 19.02497982, 19.03927995, 19.05072005, 19.06502018,
       19.07932031, 19.09648047, 19.11364062, 19.13080078, 19.14510091,
       19.16226107, 19.1765612 , 19.19372135, 19.21088151, 19.22804167,
       19.24520182, 19.26236198, 19.27380208, 19.29096224, 19.30526237,
       19.32242253, 19.33958268, 19.35960286, 19.37676302, 19.39392318,
       19.41108333, 19.42538346, 19.44540365, 19.4625638 , 19.47972396,
       19.49402409, 19.51118424, 19.53406445, 19.55408464, 19.57696484,
       19.59984505, 19.61700521, 19.63702539, 19.6599056 , 19.68278581,
       19.70566602, 19.72854622, 19.74856641, 19.77430664, 19.80004688,
       19.82864714, 19.8572474 , 19.88298763, 19.93160807, 20.16327018,
       20.48645313, 20.86969661, 21.28154036, 21.7134043 , 22.14526823,
       22.55425195, 22.93177539, 23.27783854, 23.60388151, 23.91848437,
       24.21878711, 24.49620964, 24.76219206, 24.99957422]

def correct_pump_on_window(time_series, amb_lt_h2o_flag, window_size):

    slopes_before = [np.nan] * window_size
    slopes_after = [np.nan] * window_size

    for i in range(window_size, len(time_series)-window_size):
        slopes_before.append(time_series[i] - time_series[i-window_size])
        slopes_after.append(time_series[i+window_size]-time_series[i])
    diff = np.array(slopes_after) - np.array(slopes_before)

    if amb_lt_h2o_flag: # during the time that the ambient temperature is rising:
                        # for this case we want to check if there is a breakpoint where the slope before is smaller
                        # then the slope after the breakpoint (so looking for maxima)
        break_points = find_peaks(diff, prominence=0.5)
    else:   # during the time that the ambient temperature is cooling down:
            # for this case we want to check if there is a breakpoint where the slope before is bigger (less negative)
            # then the slope after (more negative) the breakpoint (so looking for minima)
        break_points = find_peaks(-diff, prominence=0.5)

    break_point_idx = 0
    if len(break_points):
        break_point_idx = break_points[0]

    return break_point_idx

plt.plot(time_series)
plt.plot(diff)


